// Code generated for package start by go-bindata DO NOT EDIT. (@generated)
// sources:
// img/start/start.png
package start

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imgStartStartPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x96\x7d\x3c\x93\xfb\xff\xc7\xaf\xe9\xb0\xb2\xa4\x73\x9a\xc9\x5d\xca\x5d\xc6\xa2\xda\x48\x84\xd0\x70\x2d\xab\x59\xe8\x22\x4a\xc3\x72\x93\x64\x2c\x37\xe7\x54\xe2\xe8\x66\x44\xa6\xd4\x36\x8a\x5a\xec\x6c\x6b\x59\x37\x98\x43\x84\x9d\xa9\x2c\xa1\xb6\x53\xa9\xdc\xdf\xad\xe8\xc6\x4d\x29\xfa\x3d\xae\xf3\xfd\xf7\xf7\xc7\xf5\x79\x3c\xae\xcf\xe3\xfd\x7a\x5e\xcf\xcf\xe7\xfd\xfe\xe3\x3a\x47\xd9\xe5\xa7\xa7\x6b\xac\x0b\x00\x80\x1e\xe8\xbf\x83\x0a\x00\x40\x09\x00\x20\x70\x4b\x75\x00\x00\x58\xb7\x9e\x44\x04\x00\x44\x6e\x9c\x8f\x0f\x05\xf4\xf1\x59\x7b\x94\x91\x44\x8f\x3b\x1c\x03\x00\xb6\x45\xc7\x8b\xdc\xfd\x5b\xb7\x9b\xca\x0f\xf4\x94\xb0\x82\xcc\xde\xaf\x1d\xb8\x50\xe1\x1a\xba\xb2\x69\x65\xf8\x3d\x5d\xa2\x80\x12\x9f\x1b\x62\x16\xe0\xb0\xb0\x92\x4b\xb0\xc2\x3a\x14\x64\x27\x3c\x7c\x58\x28\x17\xe6\xe4\xdd\x95\xac\x90\x64\xaf\xfd\x8a\x18\x18\x1a\xe3\x8f\x59\x58\x2f\x3a\x62\xef\x9d\xfd\xd4\x57\x67\x3e\x35\xe9\x3e\xf9\x16\xe1\xdd\xd8\x11\x84\xdf\xa8\x25\xe0\xc6\xf0\x57\x25\x6f\xe2\xed\xfb\xd5\xe7\xf6\xd2\xeb\x26\x88\x80\xc8\x30\x5a\xa5\x07\x8f\x64\xdd\xbf\xf5\xc1\x64\xff\xa0\x26\x22\xff\x50\xc6\xb5\xef\x29\xa9\xd8\x8c\x62\x84\x47\x51\xfa\xe9\xf1\xd3\xc4\x86\x5d\xdb\x64\x71\xe3\xa5\x73\xe7\x2c\xc5\x56\xd8\xb6\xd1\xb6\x56\x9d\x88\x0b\x5f\x8b\x34\x77\x9e\x24\x95\xe6\xad\x40\x6d\xc3\xd3\xa2\xbb\x53\xda\x7e\xa5\x49\xff\xfd\x87\x61\x72\x97\x5d\xf1\x5b\xe1\x2a\x3f\x83\xe0\x1b\x7f\xac\xd3\xdc\x69\xc9\xc8\xbb\x1b\x26\xb9\x33\xe2\xfe\x0d\xd5\x9a\x91\x98\x71\x4e\x43\x40\x5e\x68\xd6\xc2\x14\x65\x2f\x35\x0a\x3e\x5c\xbe\x1c\xb5\x29\xcc\x89\x1a\xc0\x8f\xf3\x9c\xec\x9f\x4a\xfb\x81\x65\x3c\x1a\x7a\x05\x58\x2a\xb6\xd9\x51\xd6\x6d\x3d\xf1\xd1\xf3\xeb\x9b\x5b\xa1\xab\x4d\x98\xc5\x2d\xc9\x6b\xbf\xd2\x5e\x9b\xe7\x6c\x8f\x35\x8c\x7d\x7e\xf8\xfb\xf7\x7f\x6b\x4c\xd6\x67\xfd\x34\xaa\xeb\x0e\x5b\x24\x99\x5d\x99\xb7\x6a\x54\x75\x5f\xf7\xdb\xde\xe9\x7c\x34\xf9\x4d\xf7\x90\x7b\x1f\x03\x39\xf6\x7b\xb7\xb5\x0f\xc3\xca\x93\x5c\x41\x01\xde\x76\x8e\xf1\x18\xdb\xa7\x36\x3c\x93\x4d\xcc\xaa\x7a\x15\xe3\x4b\x2e\x54\x48\xd8\x5b\x9a\x1f\xae\xdb\x18\xc4\x7f\xef\x54\x98\x96\x76\x6f\x6e\x76\x8a\x43\x3f\xe9\xf9\x37\xc0\x68\xe3\x9e\xcb\x22\x03\x00\xb0\xec\xa8\x7f\x68\x0a\x00\xa0\x56\xc1\x0f\x02\xe0\x96\xae\x06\x00\x00\x99\x0a\x92\x89\xc8\x21\xed\x15\xda\xfa\x4b\x47\x6a\x22\x0e\x02\x00\x60\x94\x4a\x84\x52\x7d\x92\x12\x13\x63\x8e\xa4\x02\x3e\x8c\x98\x83\xa9\x31\xd1\x6b\xd3\xe2\x52\x63\xd7\xfa\x81\x64\xca\xde\x53\x2b\x0c\x01\x00\x65\x01\xee\xf0\x0a\x4a\x7f\xf5\xa1\xec\xc3\x91\x20\xb5\x51\xae\x7a\xeb\x6c\xdd\x2d\x63\xe3\x5c\xc0\x7b\x71\x70\xa7\xad\x0d\x9f\xbf\x36\x9b\x78\x56\xa6\xf7\xe7\x1f\x78\xe8\xc1\x2f\x7d\xbe\xdc\x10\x3e\xe9\x95\x6f\x9c\xd1\x67\xcb\xc6\xb3\xe5\xce\x76\xe0\x4e\x56\x67\xc7\x6b\x73\xbc\x89\x51\xfc\xfb\x6f\xe9\x73\xa5\x0b\x9f\xc4\x26\x40\x59\xc6\xbd\xb7\xcc\xd9\x8c\xc6\xcb\x1d\xef\x1b\x38\x20\x5b\xa5\x56\xe7\x5e\xc8\xeb\x78\xbf\x0f\xef\x66\xd2\x17\xcf\x3d\x7d\x26\x3b\xbc\x79\x33\xde\x84\x1b\x8a\x5f\x53\x78\xbf\xa9\xa9\xd3\xc7\xeb\x48\x24\x87\xe3\xee\x74\x17\xf5\x50\xa6\x93\x83\xd0\x47\xca\xb2\x0c\x4a\x13\x94\x1d\x57\xce\xb4\x1b\x88\x01\xf5\xdf\x0f\x65\xce\xce\xce\xe9\xfe\xed\xda\x62\x40\x6d\x54\x8a\xca\xc8\x89\xa1\xcf\xb6\x75\xe8\xd0\x2b\x95\x4a\xf2\xfd\xc4\x27\xad\xde\x0e\x91\xda\xa3\xae\x27\xd3\xd3\x6d\xc1\xb0\x7d\xfb\x06\x4f\xad\x33\xac\xd6\x0a\xd7\xe5\xa0\xd6\x39\x56\x6b\x85\x8f\x2e\x9d\x6e\x37\x11\x03\x6a\x9d\x53\x6b\x32\x72\x0c\xb4\x16\xdc\x4c\xaf\x5b\x24\x55\x67\xa7\x34\x2a\x6a\x89\x43\x7a\x21\x59\x22\x27\xbc\xfb\x1f\x5f\x57\xd6\x5d\x30\x81\x10\x12\x94\xb8\xb7\x7c\xf0\xf9\xbf\x8c\xd1\xa5\xbb\xad\x23\x4a\xa2\xeb\x30\xae\xc2\x98\xc2\x1e\x47\x30\xd3\x62\x1c\xe7\xf7\x6b\x7b\x8f\xb4\xc0\x55\xcd\x04\x1d\xb9\x95\xfd\x56\x06\x8f\x34\x4b\xfa\xac\xc1\x03\xfe\xf3\xa1\x7d\x17\x3b\x3d\xb3\x86\x6f\x26\x82\x27\x4b\xa6\x1f\x70\xe2\x08\xc6\x9f\xfa\x8d\xab\x7b\x53\xc1\xee\x43\x6c\xc2\x9a\x42\xe6\xdc\x64\xc4\xd5\x8d\x46\x4f\x82\x77\x5b\x7f\x20\x65\xaa\x08\xe7\x75\x72\x4e\xb5\x9c\xfe\x45\x0b\xa7\x5f\xe7\x71\x91\x60\xf1\x0c\xaf\xdb\xa8\x18\x50\xb3\x9f\x7e\x4c\xfc\x55\xc1\x1a\x0e\xdf\x62\xbd\x90\x95\xd2\x0f\xbd\x7d\x3a\x23\xe3\x3b\xe1\x7b\x1a\x7f\x9f\x4b\xdf\xd7\x26\xfd\xb1\xa4\x91\xe3\x9e\xf0\x3a\x24\x21\x21\xc1\xf8\xbc\xef\x0f\xad\xac\x61\x1d\x75\x4d\x5b\xbd\xde\x8d\x67\x27\x71\x2b\x9c\xdc\x77\x5c\xfa\x5a\x73\x36\xea\x9b\x9b\x3a\xc9\x7a\xe1\xf2\xf6\xc2\xa8\x0c\x37\xf5\x35\xab\x85\xec\xe3\x0e\xcd\x9f\x55\x35\x7c\x47\xa7\x08\xd9\x78\x7d\x41\xaf\x36\x24\x79\x3a\xf3\x7d\xdc\x5f\x95\x83\xd4\xcf\xca\xcb\x1f\xbe\x2a\x9b\xf4\x9f\x2f\x48\xca\xcb\x32\x58\x22\xd1\xb7\x3a\x9f\xbc\xc1\xb7\x62\x0e\xfa\xc1\xe3\xcf\xb9\xb0\x9a\xa5\xb4\xad\x6a\x3d\xf0\xe7\x88\xad\x96\xe2\xf3\x31\x89\x27\xc9\xb8\x7a\x64\x39\xb4\xa9\xc0\xe2\x01\x3b\xb5\xc0\xe9\x50\x33\xab\x3f\xbc\xa9\x98\xdf\xda\xea\x13\xd1\x90\x5e\x74\xe0\x3f\xd6\xfe\x5b\x5b\x93\x0e\x1f\x1e\x1b\x7e\x72\xf9\x07\x03\xd6\x4b\xb2\x62\xfe\x92\xf9\x1f\x91\xf4\xdb\x5e\xdb\x7e\xa8\xab\x34\xc1\xaf\x3b\xa5\x14\x05\xf3\x14\xec\x30\x7c\xcf\xe2\xa2\xc7\x3b\x4c\x32\x2e\x6d\xb4\x3e\x8a\xfe\xee\x7e\xa2\x68\x66\x86\xc9\x8c\x50\xdc\x5e\x06\x39\xcc\xfb\x16\x7f\x71\x90\x50\x68\xe8\xfa\x09\x35\x37\xbc\xa2\x8d\x8b\x2f\x30\x48\xc4\xed\x2f\x9e\x5e\x75\x6a\x8d\xe2\xf3\x8a\xe9\x03\xa4\xf9\xad\x09\x4f\xb3\x86\x6f\x25\x92\x8f\x8d\xbd\x3b\xa4\x34\xaa\xa6\xb9\xa8\x0f\xb1\xb9\x9f\xd2\xc5\xdf\xe7\xa6\xbe\x68\xd8\xd2\xde\x77\x98\x34\x39\x17\x1f\x49\xd4\x9d\xde\x4b\x08\x4d\xb1\x79\x86\xd7\x8d\x50\x0c\x1c\xb0\x5e\x60\xdd\x58\x6a\x6a\x5f\x92\x72\x1c\x37\xee\xf7\x3f\x95\x4e\xeb\x5b\x3d\xe8\xbc\x28\x39\x43\xf2\x46\xa2\xb9\xaa\xa7\xb3\x44\x42\xd1\xc2\xa5\xd5\xd5\x79\x9f\x0b\x5c\x1d\x83\x5b\xe1\xb4\xb0\x44\x4f\xcb\xbd\xc0\xa0\x55\x26\x21\xb9\x5a\x3d\x1b\x84\x1b\x63\x08\x36\x45\x2b\x8d\xe0\x66\xd5\x5a\x1d\x7f\x47\x38\xcf\xad\x0c\x6c\x2c\xfc\xdf\x3d\xc5\xd6\x8f\x74\x18\x90\x5c\x42\x96\x8f\x66\x32\x73\x7f\x83\x1d\xf5\x0c\xc9\xd2\xfc\x16\xdb\xa8\xa2\x4a\xc8\xd4\x5e\x98\xd2\x85\xce\x8b\x22\x26\x3b\x70\x69\x08\x7b\x56\x2c\x4b\x5b\x2c\x78\x4a\xdc\x83\x33\xb2\x8f\x1f\xb9\x8e\xc5\x54\x5f\x7f\x48\xdc\x83\xbb\xb1\xf1\x31\xc4\xc7\x62\x14\xac\x89\x70\x82\x7c\x00\x0a\x2c\xcd\x83\x93\x47\xca\xab\xb0\x98\x6a\xda\x43\x39\x17\xff\xff\x15\x34\xb3\x2c\x60\x24\xcc\xdf\xf9\x0f\x8b\x2b\x83\xd1\xb1\x47\x83\xdf\xa1\x9f\xd8\xe6\xe3\x31\xa2\x24\x96\x5c\x3a\xe0\xba\xf7\x3e\x59\xea\x12\x12\x3e\x2a\xac\xc1\x62\xaa\x07\xcc\x89\x41\x2f\xd1\x28\x48\x94\x2c\x99\xe0\xd2\x1e\x41\x22\x65\xf8\x0b\x82\x5c\x4b\x35\xd1\x2f\xbc\x8e\x2d\x09\xac\x9b\x97\x42\xc4\x3d\xb8\x82\x17\xd7\x52\x3e\x08\xfa\x2a\x21\x53\x91\xe7\x68\xa6\x38\x9b\x47\x4b\x16\x2f\x96\x89\xda\x2b\xa1\xe6\x89\x03\x44\x67\xf9\x66\xdd\xef\x7b\x8b\x60\x6a\x58\x94\xf4\x0a\xec\x79\x6b\xfb\x81\x80\x3d\xb8\xc8\x9b\x37\x69\xb0\x0f\x79\xf4\xf1\x03\x6c\x49\xfe\xa5\xd9\xd7\xb4\x1a\xb2\x34\xeb\xd2\x89\xf2\xce\x3b\xd8\x92\xc0\x2b\x8b\x50\xc7\x1d\x2c\x46\xf1\x58\x21\xbb\x13\xcf\x92\x4b\x3f\x27\x4b\xc4\x5c\x5a\xb2\xf8\x47\xa9\x3d\x7c\x96\xc7\xab\x24\x43\xb7\x29\x34\xf4\xc8\x56\x4c\x31\x6c\xfe\xf9\x98\x24\x1a\xfe\x70\x43\x99\xfd\x4b\xd8\x64\xf9\x28\x49\x82\xc5\x28\xec\x5a\x65\xec\x04\x96\x5c\xfa\x98\x21\x89\xe6\xd2\x10\xa2\x6d\x75\xec\x58\x56\x0c\xba\x64\x0b\xa6\x38\x16\xde\x66\x4a\xf6\xc3\x29\x46\x99\x48\x5d\x09\x35\xdb\xed\x6d\x74\x96\x6b\x85\x7c\x7b\xfa\x62\xe7\x1e\x9c\x91\xe8\x6a\xc7\xfd\xee\x4a\xa8\x59\x88\x92\x5c\x72\x92\x6f\xd6\xd5\x18\xe7\xd9\xc3\xac\x89\x54\xc9\x18\x7c\x9c\xb2\xa7\x06\x8d\x58\x8c\x42\xb8\xed\x99\x22\x9e\xa5\x8d\xeb\x63\xdd\x19\xe9\xb0\x8d\xc6\xf9\xc6\xb1\xe4\x52\xca\x51\x07\x75\x25\x64\x8a\xd2\x1e\x65\x24\xb2\xb4\x71\xe8\xa1\x57\x68\x14\x34\x46\x1e\x65\xc4\xb1\xac\xa3\x2a\x6a\x63\x24\x37\xb9\x34\x04\xaa\xec\x17\x75\x0b\x59\x9a\xef\x9d\xda\x0d\x85\xd7\x61\x31\x0a\xef\xbb\x2e\xea\x5e\xb2\xd4\x05\xc3\x95\xcb\x46\x8e\xb0\xb4\x71\x04\x4d\x60\x5b\x38\x59\x9a\x95\x3b\x92\x2c\xe1\xf0\x68\x8f\xa0\xd8\xa2\x0e\x66\xfc\x1e\x5c\x64\x05\xb1\xdf\x55\x8a\x2d\x09\x3c\x8b\x31\xcb\x5b\xef\x2c\x1f\x80\x62\x43\x47\x5f\x75\x6d\x82\xb3\x61\x2a\xd9\x1a\x0d\x7c\xcf\xa8\x8c\xad\xea\x04\x38\xdc\x30\x1d\xb6\x07\x77\x63\x65\x06\x96\x20\xbf\xea\x84\x37\x45\xc9\x34\x53\xec\x63\x47\x71\x68\x62\x56\x6e\x83\xcf\x0f\x3d\xb0\x53\x95\x81\x69\xdf\xd4\x70\xc0\xa6\xc1\x32\xa9\xea\x95\x13\x1e\xb5\xc5\x79\x10\x6a\x5f\x22\xb4\x67\xfb\x22\x91\xc8\x78\xae\x6f\x84\x1a\x81\x09\x33\x16\x9a\x99\xdd\x35\xec\xb4\xdd\x91\x17\x2f\x00\x35\x9a\x26\x6e\xe5\x26\x0f\x6f\x4b\xc7\x2a\x5a\xa2\xce\x37\x24\x93\xac\x79\xff\x76\xf6\xb2\x5b\x34\x8e\xe0\x18\xf4\x3a\x42\x1d\x97\x90\xb0\x93\x5d\xf0\x66\x8d\x36\xfc\x7e\x8d\x54\x7c\xf3\x41\xcf\xe2\x15\xad\xea\x67\x62\xaf\x05\x4b\xd0\x91\x57\xc9\x19\x9f\xf5\xdc\x8c\xe1\xca\xff\xf2\xb8\x4a\xb7\x03\xb9\xe3\x24\xb0\xd9\xbb\xca\x8b\xb9\xb3\xbb\x70\xbd\xf6\xcc\x60\x5b\xf2\x12\xd7\x65\x76\x0e\xda\x5e\x93\x94\x37\xcb\x28\x1b\xa8\x84\xed\xe9\x7e\x0a\x2f\x66\x28\xdb\x3d\x73\xda\x9f\xdc\x83\x7b\xfe\xf7\x12\x68\x8c\x2c\xf0\xe8\x4a\x9d\xb9\x19\x67\xbc\x81\x7b\x71\x75\xee\xd8\x58\x51\x0b\x13\xfc\xb9\x5c\xe4\xf8\xa4\x2d\xa9\xc5\x4d\x77\x97\x9c\xd9\xdb\x6e\x26\x7c\xcd\x3e\xc1\x9d\xf3\x47\x28\xbc\xd7\x7b\x11\x87\x97\x31\xce\xc4\xab\x3b\xd0\x1e\x3d\xe9\xac\xda\x96\xcc\x8a\x79\x0a\xb5\xb6\xb6\xb6\xaa\x26\x31\x82\xd7\x04\x88\xf6\x0b\x8e\xc4\x53\xfb\x4d\x3e\x98\x1f\x44\xab\x96\xbd\xf8\x32\xa8\x3a\xe7\x4e\x4c\xbf\x9d\xf4\x23\xd0\xb9\xe0\x8f\x9c\xfa\x4a\xb7\x89\x4d\x65\xac\xfc\xe0\x97\x45\xd9\x9c\xb8\xa4\xa4\xdd\x6c\xcc\xfc\x2c\x12\x76\x38\xb2\x93\xfa\xba\x26\x90\x24\x47\x88\x3c\xf4\xac\x23\x7a\x86\x76\xbc\x69\x0c\x28\xfd\xb8\xff\xf6\x9e\x88\xcb\xd3\x34\x03\xaf\xb2\x8f\xfb\xf5\x83\xae\xf9\xcf\x17\x8e\xd6\x7a\x9a\xa2\x04\xfb\x23\xac\x9f\x57\x1d\x15\xdf\x29\xaf\x5f\x55\x1e\x56\x83\x2b\xfd\x58\xa0\x15\x64\xee\x6f\x7c\x86\x39\x20\xd1\x00\xa8\x0d\x7a\x2f\x36\x90\x7f\x7e\x3c\xc8\x61\xd2\x7c\xd7\xb9\x66\xf2\x8f\xfa\x74\xcf\xf5\xdf\x8e\xa3\x9e\xeb\xf8\x73\xae\xa1\x6c\x42\x58\x59\xfb\x80\x3f\x7b\xad\x55\xfa\x39\x77\x62\x0f\x79\x92\x3a\xf6\xc1\x1f\xa1\xb0\xd3\x17\xda\x6a\xda\x5c\x42\xde\x50\x3e\x1c\x8b\x30\x8c\x29\xbb\x52\xdb\x92\x99\x33\x1f\x0c\x9e\xd9\xb7\x6f\x5f\xa0\xea\x1c\x42\xb4\xab\xaa\xfe\xaf\x47\x1e\xc1\x98\x9f\x07\x7d\x0f\xae\xa1\x7c\xf0\x9f\x5f\xf7\xa2\x7c\x57\x7a\xe7\x2a\xa1\x3d\xd7\xf4\x04\x7d\xc6\xad\x1f\x1a\x9f\x30\x21\x3f\x58\x38\x1f\x72\x7f\x57\xc0\x3f\xc2\xd6\xbf\x1c\x78\x1c\x33\x53\x53\xff\x30\xa5\xeb\xa6\xc8\x4b\xfa\x2f\x12\x41\x55\xcd\x2d\xc6\x32\x4d\x7e\xcb\x74\x21\x5a\x02\xce\x9f\x51\x04\x7b\xff\x99\x86\x2e\xb5\x7b\x2f\x38\xf4\x93\xd7\x07\xc5\x9d\x6f\x32\xdc\x6a\x86\xed\x83\xc6\x9b\x16\x12\xed\x4f\x31\x69\xa6\x22\x5c\x55\xe6\x2d\xce\x3d\xf4\xa7\x90\x7f\x1d\x83\x7e\xaa\x03\x74\xa1\xd8\x50\xc1\xb1\x7b\x7d\xc3\x3f\xf2\xbd\xa7\x6b\x2c\x73\x6b\x9d\x8b\x4b\x2c\x5a\xbe\x4f\x94\x4d\xb4\xd1\xa9\xa6\xa8\x0d\xe8\xe7\x4c\x12\x1e\x6b\x84\x52\xa2\x5e\x04\x28\xf9\x59\xb9\x23\xa7\xe2\x47\xe8\xd4\x66\xef\xbb\x3a\x33\x32\x2e\xf8\x08\x8a\xc5\x54\x71\xff\xe6\xa0\xab\x9f\xc5\x51\x36\x3c\x0f\x78\x0c\xcf\x86\x30\x97\x07\x26\xe3\xa6\x9d\x05\x25\xf1\x36\xd6\x0d\x37\x06\xcb\xc3\xea\xe1\x02\x1e\x45\x46\x28\xde\xac\xdb\xd5\x65\xa9\x5d\x4b\xa7\xc2\x53\x30\xfc\x2a\x80\x15\x55\x61\xab\xe4\xbb\x60\x28\xd6\x27\x2f\xad\x2c\xb8\x64\x1e\xd4\xc5\x05\x33\xec\xc5\x86\x42\x81\x92\x9f\x15\xbc\x3e\xa8\x8b\x07\x1a\xe5\x32\xbd\x67\x1a\x86\x98\xb4\x96\xdf\x3d\x07\x93\xda\x8a\xb4\x0a\x86\x8d\x9f\xdf\x6f\xa1\x53\x37\x87\x58\xfb\xe9\x8a\x8e\xd8\x68\x8b\x3f\x57\x4c\xdc\xe4\xa0\xab\x1f\x07\xdf\x56\xf2\xff\x9c\x63\x94\x09\xd5\x74\x6a\xcb\xef\x1c\xca\xcc\xdb\x00\x56\xd4\x25\x64\xf0\x6f\x4a\xbe\x4b\x48\x28\xc5\xba\x27\x80\x94\xee\x88\x14\xf2\xb9\x20\x42\xb4\x5c\xc0\x4e\xb0\x89\x41\x8f\x9c\xe4\x5f\x88\xc6\x63\xfb\xdd\x93\xaa\x48\x35\x1c\xb4\xe2\xb1\xa1\x90\xcf\x03\x93\xc5\xdb\x2a\x68\x65\xab\x15\x8c\x33\x76\x79\x74\xea\x5b\xdd\x2f\xba\x13\x2f\x09\xc5\x5a\x21\x1e\xbb\x2e\x05\xe3\xb1\x37\x36\xea\x0b\x8e\x5d\x0c\x85\x53\xc7\x05\x77\x0e\xdb\xc8\xa5\xdd\xc1\x2a\x25\x3f\x5a\x9c\x5a\x66\xa7\xa1\x53\x9b\x49\xab\x84\xef\x61\xef\x71\x33\x2c\xba\x2b\x80\x94\xbe\xfb\xc9\x5f\xac\x38\xb8\xca\xf8\xa4\xa3\x0b\xb5\x59\xba\xed\xdd\x22\x2b\xc1\x46\x2e\x9d\x4f\x13\x5a\xf0\xc0\x0c\xfb\xf7\x86\x42\x1a\x0f\x44\x88\x3c\x05\xc7\x82\xbe\xc1\x8d\xf8\x69\x99\x3b\xc0\x03\x97\x4d\x89\xd2\x84\x76\x5c\x30\x59\x6c\x80\x64\x06\x77\x07\x90\xfe\x09\x33\x0b\x0a\x76\x2a\xd6\x52\xc5\x97\x0b\x25\x1c\x74\xf5\x00\x72\xc6\x8e\x07\x3e\x82\x92\xcb\x84\xaf\xe8\xd4\x66\x16\x32\xf8\x85\x92\x6f\xba\xa5\xed\x94\x70\x9e\x4e\x35\x7d\x62\x6e\xc7\x05\x97\x4d\x4d\x52\xba\x02\x74\x21\x78\x7d\x6c\x9b\xea\x49\x2d\xe7\x5c\xfc\x38\x39\x19\x44\x28\x1e\xf8\x6f\x8f\x15\x25\xf3\x91\x07\x7b\xbb\x94\xb8\x05\x11\x8a\x3f\x87\x8c\xad\x30\x50\xf2\xb3\x86\xe1\x35\xbf\xc5\x96\x02\xcb\xa7\x99\x9f\x84\x8b\x1f\x78\x45\x10\x8a\xd9\xd2\x86\x42\x74\xac\x8d\x36\x2e\x49\x10\x6b\x43\x94\x44\x76\x05\xb0\x7a\x5b\xdd\x94\xfc\x76\xf7\x86\x9e\x00\x56\xaf\x59\x1e\x9d\x3a\x34\x09\x11\x8a\x2d\xe6\x3e\xee\xc2\x63\x19\xc8\x3c\x3a\x35\xb5\xfe\xb0\x87\xfb\xa6\xbb\x69\x5a\xfe\xa5\x02\x4b\xfd\xea\xd3\xf4\x9a\x83\x74\x7e\xea\x90\x8e\xea\x59\xc7\x53\xed\xaa\x01\x7f\x44\x46\x96\x13\x01\xcf\x40\x33\xb4\x13\x62\xe9\xa3\xad\x7e\xd1\xaa\x73\x45\x48\x68\x77\xc7\xe1\x48\xfa\xab\xde\xde\xa1\x9c\xcd\x0c\x44\x42\x2c\xfd\xd0\xd2\x89\xf6\x55\xe2\x0a\x4e\xe3\x4e\x8a\xdf\xd5\x48\x3d\xe5\x61\xbd\x2a\xef\xab\x91\xf0\x0f\xa7\xe9\x09\x8b\xdd\xd5\xa7\xe9\xaa\x7c\x45\xd4\x87\xa9\xa9\x2f\x94\x0b\x28\xe8\x1d\xf7\xe5\xcb\xbe\x20\x71\xd3\x5a\xc7\xea\xa7\x48\x01\x74\xdc\x6b\xff\xbc\xf9\x06\xdd\xf3\xcd\x79\x27\xee\xdd\x06\x00\x00\x00\x89\xbb\x76\x48\xbc\x23\xb3\xff\x2f\x00\x00\xff\xff\x11\xe1\x6b\xfa\x39\x0d\x00\x00")

func imgStartStartPngBytes() ([]byte, error) {
	return bindataRead(
		_imgStartStartPng,
		"img/start/start.png",
	)
}

func imgStartStartPng() (*asset, error) {
	bytes, err := imgStartStartPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "img/start/start.png", size: 3385, mode: os.FileMode(438), modTime: time.Unix(1589441078, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"img/start/start.png": imgStartStartPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"img": &bintree{nil, map[string]*bintree{
		"start": &bintree{nil, map[string]*bintree{
			"start.png": &bintree{imgStartStartPng, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
